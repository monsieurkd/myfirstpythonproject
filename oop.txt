
from os import device_encoding

# self có thể cả class hoặc instant của class (eg: emp_1) trong khi class thì chỉ cụ thể cả class chứ k chỉ từng instant riêng biệt :v
#regular method takes the arguments as an instant
#class method thì tương tự nhgma thay vì instant thì dùng class

class Employee:
    raise_amt = 1.04
    num_of_instant = 0
    def __init__(self, first, last, pay):
        self.first= first
        self.last = last
        self.pay = pay
        self.email = first + '.' + last + '@company.com'
        Employee.num_of_instant += 1

    def fullname(self):
        return '{} {}'.format(self.first, self.last) 

    def apply_raise(self):
        self.pay =int( self.pay )* self.raise_amt #getter & setter are better
        #there is a big difference between self instant and class instant
        #access a class instant through the class itself or through a instant of the class 
    @classmethod
    def set_raise_amt(cls, amount):
        cls.raise_amt = amount
    @classmethod
    def from_string(cls, emp_str):
        first, last, pay = emp_str.split('-')
        return cls(first, last, pay)
    @staticmethod #dont access any class argument or instants argument
    def is_workday(day):
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True 
    def __repr__(self):
        return "Employee('{}',' {}','{} ')".format(self.first, self.last, self.pay)
    def __str__(self):
        return '{} - {}'.format(self.fullname, self.email)


class Developer(Employee):
    raise_amt = 1.10
    def __init__(self, first, last, pay, prog_lang):
        super().__init__(first, last, pay)
        self.prog_lang = prog_lang
    @classmethod
    def from_string(cls, emp_str):
        first, last, pay, prog_lang = emp_str.split('-')
        return cls(first, last, pay, prog_lang)
class Manager(Employee):

    pass

'''emp_1 = 'Kieu-Duc-298'

new_emp_1  = Employee.from_string(emp_1)

print
import datetime
my_date = datetime.date(2022, 10, 16)

print(Employee.is_workday(my_date))
'''
emp_2 = 'kevin-durant-297-python'
dev  = Developer.from_string(emp_2)

#inheritence
print(dev)
print(dev.prog_lang)

print(dev.pay)
dev.apply_raise()
'''
class Vehicle:
    def __init__(self, name, max_speed, mileage):
        self.name = name
        self.max_speed = max_speed
        self.mileage = mileage

    def seating_capacity(self, capacity):
        return f"The seating capacity of a {self.name} is {capacity} passengers"

class Bus(Vehicle):
    capacity = 50

print(Bus.seating_capacity())
'''


